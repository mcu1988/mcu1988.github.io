<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JasonXu</title>
  <subtitle>Pull up by bootstraps!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mcu1988.github.io/"/>
  <updated>2017-08-19T05:52:12.000Z</updated>
  <id>https://mcu1988.github.io/</id>
  
  <author>
    <name>JasonXu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个例子理解BP反向传播</title>
    <link href="https://mcu1988.github.io/2017/08/19/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E7%90%86%E8%A7%A3BP%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/undefined-title/"/>
    <id>https://mcu1988.github.io/2017/08/19/一个例子理解BP反向传播/undefined-title/</id>
    <published>2017-08-19T05:46:32.000Z</published>
    <updated>2017-08-19T05:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="误差递推公式"><a href="#误差递推公式" class="headerlink" title="误差递推公式"></a>误差递推公式</h2><p>文章[神经网络原理推导]（）中给出了神经网络误差反向传播的公式，</p>

$$\eqalign{
  & {\delta ^L} = {\text{(}}{{\text{a}}^L}{\text{ - y)}} \odot \sigma '({z^L}){\delta ^L} = {\text{(}}{{\text{a}}^L}{\text{ - y)}} \odot \sigma '({z^L})  \cr 
  & {\delta ^l}{\text{ = }}({(\omega _{}^{l + 1})^T}{\delta _{}}^{l + 1}) \odot \sigma '({z^l})  \cr 
  & \frac{{\partial C}}{{\partial {b_j}^l}}{\text{ = }}{\delta _j}^L  \cr 
  & \frac{{\partial C}}{{\partial {\omega _{kj}}^l}}{\text{ = }}{\delta _j}^l{a_k}^{l - 1} \cr} $$

]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;误差递推公式&quot;&gt;&lt;a href=&quot;#误差递推公式&quot; class=&quot;headerlink&quot; title=&quot;误差递推公式&quot;&gt;&lt;/a&gt;误差递推公式&lt;/h2&gt;&lt;p&gt;文章[神经网络原理推导]（）中给出了神经网络误差反向传播的公式，&lt;/p&gt;

$$\eqalign{
  &amp; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Next主题中使用mathjax书写公式</title>
    <link href="https://mcu1988.github.io/2017/08/18/%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8mathjax%E4%B9%A6%E5%86%99%E5%85%AC%E5%BC%8F/undefined-title/"/>
    <id>https://mcu1988.github.io/2017/08/18/在Next主题中使用mathjax书写公式/undefined-title/</id>
    <published>2017-08-18T05:26:39.000Z</published>
    <updated>2017-08-18T07:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写博客有时会遇到添加公式的情况，如果用图片的方式插入公式，一者不美观，二者公式不清晰，三者公式难以自动编号。有过撰写论文经验的朋友都知道，公式一般要居中对齐，并且在公式所在行的最右边需要添加公式编号。博主花了好久结局了这个问题，下面将自己的方法分享出来。</p>
<p>Mathjax和Katex都能够在网页中添加公式，后者是新开发出来的，在速度上据说由于前者，但前者用较多，教程也更多，我选着了前者。</p>
<h2 id="MathJax简介"><a href="#MathJax简介" class="headerlink" title="MathJax简介"></a>MathJax简介</h2><p>MathJax是一个跨浏览器JavaScript库，它在Web浏览器中显示数学符号，使用MathML，LaTeX和ASCIIMathML标记。MathJax作为Apache许可证下的开源软件发布。</p>
<h2 id="使用Mathjax"><a href="#使用Mathjax" class="headerlink" title="使用Mathjax"></a>使用Mathjax</h2><p>有3中方法使用Mathjax：</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在markdown博客中引入脚本：</p>
<pre><code>&lt;script 
    src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;
&lt;/script&gt;
</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>在next主题的配置文件_config.yml中搜索MathJax，将enable:和  per_page: 的选项更改为true，如图：</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/mathjax%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%94%B9true.png" width="100%" height="25%"><br></center>  

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>使用hexo-math插件</p>
<p>安装步骤：</p>
<ol>
<li>进入博客所在文件夹，输入命令：npm install hexo-math –save </li>
<li><p>在hexo的配置文件_config.yml中添加：  </p>
  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr"> math:</span></div><div class="line"><span class="attr">  engine:</span> <span class="string">'mathjax'</span> <span class="comment"># or 'katex'</span></div><div class="line"><span class="attr">mathjax:</span></div><div class="line"><span class="attr">    src:</span> <span class="string">custom_mathjax_source</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># MathJax config</span></div><div class="line"><span class="attr">  katex:</span></div><div class="line"><span class="attr">    css:</span> <span class="string">custom_css_source</span></div><div class="line"><span class="attr">    js:</span> <span class="string">custom_js_source</span> <span class="comment"># not used</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># KaTeX config</span></div></pre></td></tr></table></figure>
<p>  Hexo-math可以配置使用’mathjax或者 ‘katex’。 有关Hexo-math的详细信息和安装过程参考<a href="https://github.com/hexojs/hexo-math" target="_blank" rel="external">这里</a>。</p>
</li>
</ol>
<p>以上三种方法中推荐使用第二种。</p>
<h2 id="公式自动编号"><a href="#公式自动编号" class="headerlink" title="公式自动编号"></a>公式自动编号</h2><p>安装MathJax后，默认只识别行内公式，公式输入格式要求是这样的：\$公式\$或者\\公式\\，而且公式不支持自动编号，这样使用起来不太方便。</p>
<p>解决办法如下（只针对上面的方法二）：</p>
<p>找到MathJax配置文件themes/next/layout下的mathjax.swig文件，更改如下（<a href="https://github.com/mcu1988/MathJaxConfiguration" target="_blank" rel="external">完整代码在这里</a>）：</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/mathjax%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7.png" width="100%" height="25%"><br></center>  

<p>更改了inlinemath和displaymath增加了autoNumber:”all”，更改后行内公式输入格式：\$公式\$，行间输入公式格式：\$\$公式\$\$，行间公式自动在页面右端添加编号。</p>
<p>例如：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$$S(x)=\frac&#123;<span class="number">1</span>&#125;&#123;<span class="number">1</span>+&#123; &#123;e&#125;^&#123;-x&#125; &#125; &#125;$$</div></pre></td></tr></table></figure>
<p>显示如下：</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7%E5%9B%BE%E4%BE%8B.png" width="100%" height="25%"><br></center>  

<h2 id="输入公式方法"><a href="#输入公式方法" class="headerlink" title="输入公式方法"></a>输入公式方法</h2><p>先在mathype中写好公式，然后调整mathtype选项，</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/mathtype%E7%B2%98%E8%B4%B4tex%E8%AE%BE%E7%BD%AE1.png" width="80%" height="25%"><br></center>  

<center><br><img src="http://our9hb3to.bkt.clouddn.com/mathtype%E7%B2%98%E8%B4%B4tex%E8%AE%BE%E7%BD%AE2.png" width="80%" height="25%"><br></center>  

<p>粘贴公式到markdown中，建议使用<a href="https://www.zybuluo.com/mdeditor#852900" target="_blank" rel="external">Cmd Markdown</a>，可以预览公式。</p>
<h2 id="一些bug"><a href="#一些bug" class="headerlink" title="一些bug"></a>一些bug</h2><ol>
<li><p>公式中出现 {{ 和 }} 时hexo报错，解决办法是在两个相连的大括号中添加空格，例如： 将{{修改为{空格{  或者更改为：{ % raw % }  {{ { % endraw % } 。参考hexo官方的说明<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">泄露（Escape）内容</a><br>一个最简单的方法如下：</p>
 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;%<span class="built_in"> raw </span>%&#125;</div><div class="line">公式</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>mathtype中一些特殊的符号在MathJax中不显示，如</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/mathtype%E4%B8%8D%E8%AF%86%E5%88%AB%E7%9A%84%E7%AC%A6%E5%8F%B7.png" width="20%" height="25%"><br></center>  
</li>
<li><p>复杂的公式中如果变量下表包含多个字母时建议用空格隔开，否则公式不显示。</p>
</li>
</ol>
<h2 id="关于CDN"><a href="#关于CDN" class="headerlink" title="关于CDN"></a>关于CDN</h2><p>MathJax宣布在2017.4.30关闭了CDN，并提供了其它的CDN，参考<a href="https://www.mathjax.org/cdn-shutting-down/" target="_blank" rel="external">这里</a></p>
<p>更改方法如下：</p>
<p>找到MathJax配置文件mathjax.swig，把</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span></span></div><div class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://cdn.mathjax.org/mathjax/2.7-latest/MathJax.js? ?config=TeX-AMS-MML_HTMLorMML "</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更改为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span></span></div><div class="line"><span class="tag">	<span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外：如果CDN使用的是<a href="https://cdn.mathjax.org/mathjax/latest/" target="_blank" rel="external">https://cdn.mathjax.org/mathjax/latest/</a> 建议更改为最新版本的CDN: <a href="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML" target="_blank" rel="external">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</a></p>
<h2 id="相关下载"><a href="#相关下载" class="headerlink" title="相关下载"></a>相关下载</h2><p><a href="https://github.com/mcu1988/MathJaxConfiguration" target="_blank" rel="external">MathJax配置文件</a></p>
<p>参考：</p>
<ol>
<li><a href="https://www.linpx.com/p/front-end-integration-mathjaxjs-configuration.html" target="_blank" rel="external">https://www.linpx.com/p/front-end-integration-mathjaxjs-configuration.html</a></li>
<li><a href="http://docs.mathjax.org/en/latest/tex.html?highlight=autonumber" target="_blank" rel="external">http://docs.mathjax.org/en/latest/tex.html?highlight=autonumber</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写博客有时会遇到添加公式的情况，如果用图片的方式插入公式，一者不美观，二者公式不清晰，三者公式难以自动编号。有过撰写论文经验的朋友都知道，公
    
    </summary>
    
      <category term="Hexo优化" scheme="https://mcu1988.github.io/categories/Hexo%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="mathjax" scheme="https://mcu1988.github.io/tags/mathjax/"/>
    
  </entry>
  
  <entry>
    <title>神经网络Python实现</title>
    <link href="https://mcu1988.github.io/2017/07/31/Test/undefined-title/"/>
    <id>https://mcu1988.github.io/2017/07/31/Test/undefined-title/</id>
    <published>2017-07-31T11:43:01.000Z</published>
    <updated>2017-08-18T08:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章详细推导了神经网络的原理，这篇文章讨论的是如何将公式以代码的方式实现出来。</p>
<p>梯度下降算法更新参数w和b，</p>
<p><img src="http://our9hb3to.bkt.clouddn.com/%E4%BA%8C%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86.jpg" alt="二元函数微分"></p>
<p>参数w和b的偏导计算方式为：</p>
<p>$$\eqalign{<br>&amp; {\delta _j}^l = {\text{(} }{ {\text{a} }_j}^l{\text{ - } }{ {\text{y} }_j}{\text{)} }\sigma ({z_j}^l)(1 - \sigma ({z_j}^l))  \cr<br>&amp; {\delta _j}^l{\text{ = } }\sum\limits_k^{} {\omega _{jk}^{l + 1}\sigma’({z_j}^l){\delta _k}^{l + 1} }  \cr<br>&amp; \frac{ {\partial C} }{ {\partial {\omega _{k j}}^l} }={\delta _j}^l{a_k}^{l - 1}  \cr<br>&amp; \frac{ {\partial C} }{ {\partial {\omega _{k j} }^l} }{\text{ = } }{\delta _j}^l{a_k}^{l - 1}<br>\cr} $$</p>
<p>上式包含很多的变量上下标，这给实际编程带累了困难，为了简化变量的迭代过程，将上式以向量的形式表达出来，而python中的numpy库可以进行矩阵操作，这样就避免了嵌套多层循环，使得代码更加简洁易懂。</p>
<p>首先将输出层的误差用向量表达出来。对于2分类问题，输出层节点有2个，对于多分类问题，输出层节点数目有多个，因此，输出层节点的误差可以用一个向量表达出来。</p>
<p>$${\delta ^l} = {({\delta ^l},{\delta _2}^l, \cdots ,{\delta _n}^l)^T}$$</p>
<p>所以输出层误差向量计算公式为：</p>
<p>$${\delta ^l}{\text{ = (} }{ {\text{a} }^l}{\text{ - y)} } \odot \sigma’({z^l})$$</p>
<p>隐层误差计算公式向量化表示为</p>
<p>$${\delta ^l}=\omega _{}^{l + 1}\sigma’({z_{}}^l){\delta _{}}^{l + 1}$$</p>
<p>上述公式的实现代码（基于python2.7）在这里：</p>
<p><a href="https://github.com/mnielsen/neural-networks-and-deep-learning" target="_blank" rel="external">Python2 版本代码</a></p>
<p>Python3的代码在这里：</p>
<p><a href="[Python2 版本代码](https://github.com/mnielsen/neural-networks-and-deep-learning">Python3 版本代码</a></p>
<p>上面的代码都是从0一步步实现神经网络的，阅读上面代码有助于理解公式转化为代码的详细过程。</p>
<p>Python的scikit-learn库中自带多层神经网络的函数，因此，实际中，只需调用已有的包就能实现神经网络。下面给出python3实现神经网络的示例代码。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</div><div class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</div><div class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report,confusion_matrix</div><div class="line"></div><div class="line"><span class="comment"># iris数据集</span></div><div class="line">iris = load_iris()</div><div class="line">n_samples, n_features = iris.data.shape</div><div class="line">labelNum = np.unique(iris.target).shape[<span class="number">0</span>]</div><div class="line"><span class="built_in">print</span>(<span class="string">'样本数:'</span>,n_samples, <span class="string">'特征数:'</span>,n_features, <span class="string">'类别数:'</span>,labelNum)</div><div class="line"><span class="comment"># 特征和标签</span></div><div class="line">X= iris.data</div><div class="line">y = iris.target</div><div class="line"><span class="comment"># 特征归一化</span></div><div class="line">X = StandardScaler().fit_transform(X)</div><div class="line"><span class="comment">#训练集和测试机分割</span></div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 训练模型</span></div><div class="line">MLP = MLPClassifier(hidden_layer_sizes=(n_features,<span class="number">200</span>,labelNum),max_iter=<span class="number">500</span>)</div><div class="line">MLP.fit(X_train,y_train)</div><div class="line"><span class="comment"># 预测</span></div><div class="line">labelPredict = MLP.predict(X_test)</div><div class="line"><span class="comment"># 模糊矩阵</span></div><div class="line"><span class="built_in">print</span>(confusion_matrix(y_test,labelPredict))</div><div class="line"></div><div class="line"><span class="built_in">print</span>(classification_report(y_test,labelPredict))</div></pre></td></tr></table></figure>
<p>上述过程使用python自带的iris数据集，利用神经网络进行分类预测。模型层数为[4,200,3]，最大迭代次数为500次。神经网络中Dev其它参数为默认参数，如下：</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MLPClassifier(hidden_layer_sizes=(100, ), <span class="attribute">activation</span>=’relu’, <span class="attribute">solver</span>=’adam’, <span class="attribute">alpha</span>=0.0001, <span class="attribute">batch_size</span>=’auto’, <span class="attribute">learning_rate</span>=’constant’, <span class="attribute">learning_rate_init</span>=0.001, <span class="attribute">power_t</span>=0.5, <span class="attribute">max_iter</span>=200, <span class="attribute">shuffle</span>=<span class="literal">True</span>, <span class="attribute">random_state</span>=None, <span class="attribute">tol</span>=0.0001, <span class="attribute">verbose</span>=<span class="literal">False</span>, <span class="attribute">warm_start</span>=<span class="literal">False</span>, <span class="attribute">momentum</span>=0.9, <span class="attribute">nesterovs_momentum</span>=<span class="literal">True</span>, <span class="attribute">early_stopping</span>=<span class="literal">False</span>, <span class="attribute">validation_fraction</span>=0.1, <span class="attribute">beta_1</span>=0.9, <span class="attribute">beta_2</span>=0.999, <span class="attribute">epsilon</span>=1e-08)</div></pre></td></tr></table></figure>
<h2 id="相关下载"><a href="#相关下载" class="headerlink" title="相关下载"></a>相关下载</h2><p><a href="https://github.com/mcu1988/BPCode" target="_blank" rel="external">Python3实现神经网络</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章详细推导了神经网络的原理，这篇文章讨论的是如何将公式以代码的方式实现出来。&lt;/p&gt;
&lt;p&gt;梯度下降算法更新参数w和b，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://our9hb3to.bkt.clouddn.com/%E4%BA%8C%E5%85%83%E5%
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>神经网络原理推导</title>
    <link href="https://mcu1988.github.io/2016/12/28/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E6%8E%A8%E5%AF%BC/undefined-title/"/>
    <id>https://mcu1988.github.io/2016/12/28/神经网络原理推导/undefined-title/</id>
    <published>2016-12-28T13:01:30.000Z</published>
    <updated>2017-08-18T08:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>人工神经网络（英文：Artificial Neural Network， ANN）是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。最著名的是1986年由Rumelhart和McCelland提出的BP神经网络模型。</p>
<h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>神经网络的基本结构如图1所示，包含3层结构：输入层、隐含层、输出层。输入层输入特征变量，输出层是要进行分类或者回归的值。</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" width="40%" height="25%">图1 神经网络基本结构<br></center>  


<p>神经网络每一层由若干个S型神经元构成，每一个S型神经元的结构和感知机相似，参考上一节中感知器的模型结构。它与感知器的不同在于激活函数采用Sigmoid函数，</p>
<p>$$S(x)=\frac{1}{1+{ {e}^{-x} } }$$ </p>
<p>该激活函数与感知器中阶跃激活函数的波形类似，如图2所示，这也表明可以用该函数近似代替阶跃函数，其最大的优点在于，它是一个连续可导的函数，这样，神经元的微小的输出变化可以用导数形式近似表达出来：</p>
<p><img src="http://our9hb3to.bkt.clouddn.com/%E4%BA%8C%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86.jpg" alt="二元函数微分"></p>
<p>神经网络模型建立过程包含两部：正向传递和反向更新。</p>
<h2 id="正向传递"><a href="#正向传递" class="headerlink" title="正向传递"></a>正向传递</h2><p>首先随机初始化一组参数w和b，输入特征数据，将输入层的S函数输出作为隐含层的输入，隐含层的输出在作为输出层的输入。对于二分类问题，如果输出层S函数的输出大于0.5，则认为该样本属于类别1，否则属于类别0。由于最初的参数w和b是随机初始化的，因此，最终的分类结果并不准确。神经网络的最终目的是得到一组合适的w和b，使得预测结果达到最优，这就需要利用反向更新来进一步调整w和b。</p>
<h2 id="反向更新"><a href="#反向更新" class="headerlink" title="反向更新"></a>反向更新</h2><p>反向更新（Back Propagation， BP）的目的是确定一组恰当的参数w和b来使输出达到最优。既然是最优问题，就有对应的目标函数，</p>
<p>$$C(\omega ,b)=\frac{1}{2n}\sum\limits_{x}^{ {} }{\left| y(x)-a \right|}$$</p>
<p>其中，y(x) 是网络输出，a是实际值。该目标函数表示所有样本预测值和实际值之间差值的平方均值。系数$\frac{1}{2}$ 是为了求导方便而添加上去的，它抵消了2次项求导后的系数2，使得求到后的形式更加简洁。</p>
<p>我们的目的是使得目标函数最小，而目标函数是参数w和b的函数，因此求解参数w和b就能使得目标函数最小。常用的最优化方法是梯度下降（Gradient Descent）算法。</p>
<p>什么是梯度？梯度就是函数的一阶导数，负梯度的方向反映着函数值下降最快的方向。下面以一元二次函数讲解。</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E5%87%BD%E6%95%B0%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E5%9B%BE%E8%A7%A3.png" width="60%">图2 一元二次函数梯度下降图解<br></center> 

<p>该函数梯度$\nabla=2x$，我们的目的是找到函数最小值，具体做法是对x一小步一小步的更新，每次沿负梯度方向更新x，$x\leftarrow x-\gamma \centerdot \nabla $ ，$\gamma$ 可以理解为学习率。这样x会沿着图3中的方向一步步更新，直到达到最小值。</p>
<p>回到神经网络的问题上来，应用梯度下降算法，更新w和b,</p>
<p>$$     { { {\omega }’}_{k} }=\omega_k-\eta \frac{\partial C}{\partial { \omega_k } }$$</p>
<p>$${ { b’}_{l} }=b_l-\eta \frac{\partial C}{\partial { b_l } } $$</p>
<p>接下来对上式进行推导，给出w和b更新的最终公式。</p>
<p>先用图3表达变量名称和变量之间的关系。定义式（2）所示的目标函数，该目标函数是预测值和真值距离的平均值。</p>
<p>式（2）中，n是输入样本个数，实际计算过程中，可视为常数，w和b的反向更新过程忽略n，即单个样本的目标函数如下：</p>
<p>$$C(\omega ,b) = \frac{1}{2}\sum\limits_j^{} { { { ({y_j} - {a_j}^l)}^2} } $$</p>
<p>这个公式的实际含义是计算对输出层所以节点输出与目标值之间偏差的平方。<br>下面定义几个符号变量，</p>
<ul>
<li>${\omega _{ij} }^l$ :第l-1层第i个节点到第l层第j个节点的连接权重</li>
<li>${b_j}^l$: 第l层第j个节点的偏置</li>
<li>${z_j}^l$: 第l层第j个节点激活函数的输入</li>
<li>${a_j}^l$: 第l层第j个节点激活函数的输出</li>
</ul>
<p>各变量代表的含义如图3中所示：</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E5%8F%98%E9%87%8F%E5%9C%A8%E5%9B%BE%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA.png" width="60%">图3 变量在图中的表示<br></center> 

<p>先计算输出层误差：</p>
<p>$${\delta _j}^l = \frac{ {\partial C} }{ {\partial {z_j}^l} } = \frac{ {\partial C} }{ {\partial {a_j}^l} }\frac{ {\partial {a_j}^l} }{ {\partial {z_j}^l} } = \frac{ {\partial C} }{ {\partial {a_j}^l} }\sigma ‘({z_j}^l)$$</p>
<p>其中，$\sigma’$ 是激活函数$\sigma $的导数。这个公式表达的含义是目标函数C对输出层激活函数输入${z_j}^l$ 的偏导。该公式是应用链式法则求导，将目标转化为先对S函数输出值求导，再计算S函数输出值对S函数输入的求导。为便于理解，将该过程用图4表达出来。</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E9%93%BE%E5%BC%8F%E6%B1%82%E5%AF%BC%E6%B1%82%E8%A7%A3.png" width="60%">图4 链式求导图解<br></center> 

<p>$$\frac{ {\partial C} }{ {\partial {a_j}^l} }{\text{ = (} }{ {\text{a} }_j}^l{\text{ - } }{ {\text{y} }_j}{\text{)} }$$</p>
<p>激活函数Sigmoid这个导数比较特殊，其导数为：</p>
<p>$$\sigma ‘(z) = (\frac{1}{ {1 + {e^{ - z} } } })’ = \frac{ { {e^{ - z} } } }{ { { {(1 + {e^{ - z} })}^2} } } = \frac{1}{ {1 + {e^{ - z} } } }(1 - \frac{1}{ {1 + {e^{ - z} } } }) = \sigma (z)(1 - \sigma (z))$$</p>
<p>式（7），式（8）带入式（6）可得：</p>
<p>$${\delta _j}^l = {\text{(} }{ {\text{a} }_j}^l{\text{ - } }{ {\text{y} }_j}{\text{)} }\sigma ({z_j}^l)(1 - \sigma ({z_j}^l))$$</p>
<p>公式（9）是输出层的偏差，对于输入层的偏差，尝试先计算通项公式，通过第l+1层的偏差来极端第l层的偏差，这有点类似于计算数列的通项公式的思想。</p>
<p>$${\delta _j}^l{\text{ = } }\frac{ {\partial C} }{ {\partial {z_j}^l} }{\text{ = } }\sum\limits_k^{} {\frac{ {\partial C} }{ {\partial {z_k}^{l + 1} } } } \frac{ {\partial {z_k}^{l + 1} } }{ {\partial {z_j}^l} }{\text{ = } }\sum\limits_k^{} { {\delta _k}^{l + 1} } \frac{ {\partial {z_k}^{l + 1} } }{ {\partial {z_j}^l} }$$</p>
<p>该式也是利用链式法则，目标函数对l层S函数输入的求导转化为先对l+1层S函数输入的求导，再计算l+1层S函数输入对l层S函数输入的求导。该过程如图5所示。</p>
<center><br><img src="http://our9hb3to.bkt.clouddn.com/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99%E5%9B%BE%E8%A7%A3.png" width="60%">图5 链式法则图解<br></center> 

<p>式（10）中 ${z_k}^{l + 1}$为：</p>
<p>$${z_k}^{l + 1}=\sum\limits_j^{} {\omega _{j k}^{l + 1} } a_j^l + b_j^{l + 1} = \sum\limits_j^{} {\omega _{j k}^{l + 1} } \sigma ({z_j}^l) + b_j^{l + 1}$$</p>
<p>$$\frac{ {\partial {z_k}^{l + 1} } }{ {\partial {z_j}^l} }= \omega _{j k}^{l + 1}\sigma ‘({z_j}^l)$$</p>
<p>式（12）带入式（10）,</p>
<p>$${\delta _j}^l{\text{ = } }\sum\limits_k^{} {\omega _{j k}^{l + 1}\sigma ‘({z_j}^l){\delta _k}^{l + 1} } $$</p>
<p>上式表明了由l+1层的误差可以计算得到l层误差，式（9）计算出了输出层的误差，应用公式（13）就可以递推得到隐含层每一层节点上对应的误差。</p>
<p>我们的目标是反向更新w和b，目标函数对b的偏导为：</p>
<p>$$\frac{ {\partial C} }{ {\partial {b_j}^l} } = \frac{ {\partial C} }{ {\partial {z_j}^l} }\frac{ {\partial {z_j}^l} }{ {\partial {b_j}^l} } = \frac{ {\partial C} }{ {\partial {z_j}^l} }{\text{ = } }{\delta _j}^l$$</p>
<p>目标函数对w的偏导为：</p>
<p>$$\frac{ {\partial C} }{ {\partial {\omega _{k j} }^l} } = \frac{ {\partial C} }{ {\partial {z_j}^l} }\frac{ {\partial {z_j}^l} }{ {\partial {\omega _{k j} }^l} }{\text{ = } }{\delta _j}^l{a_k}^{l - 1}$$</p>
<p>至此，反向传播过程中参数w和b的更新公式计算完毕。整理如下：<br>$$\eqalign{<br>&amp; {\delta _j}^l = {\text{(} }{ {\text{a} }_j}^l{\text{ - } }{ {\text{y} }_j}{\text{)} }\sigma ({z_j}^l)(1 - \sigma ({z_j}^l))  \cr<br>&amp; {\delta _j}^l{\text{ = } }\sum\limits_k^{} {\omega _{jk}^{l + 1}\sigma’({z_j}^l){\delta _k}^{l + 1} }  \cr<br>&amp; \frac{ {\partial C} }{ {\partial {\omega _{k j}}^l} }={\delta _j}^l{a_k}^{l - 1}  \cr<br>&amp; \frac{ {\partial C} }{ {\partial {\omega _{k j} }^l} }{\text{ = } }{\delta _j}^l{a_k}^{l - 1}<br>\cr} $$</p>
<p>上式计算出了参数w和b的偏导，代入式（3）和（4）中即可更新参数w和b。</p>
<p>接下来的文章我将用一个详细的例子来解释神经网络参数的迭代过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;人工神经网络（英文：Artificial Neural Network， ANN）是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的
    
    </summary>
    
    
  </entry>
  
</feed>
